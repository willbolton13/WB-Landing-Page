---
import Layout from '../layouts/Layout.astro';
import { getCampuses, contentfulClient } from '../lib/contentful';

// Get all campuses
const campuses = await getCampuses();

// For each campus, resolve the courses
const campusesWithDetails = await Promise.all(
  campuses.map(async (campus) => {
    let courses = [];
    
    // Check if courses field exists and has references
    if (campus.fields.courses && campus.fields.courses.length > 0) {
      // Resolve each course reference
      courses = await Promise.all(
        campus.fields.courses.map(async (courseRef) => {
          try {
            const course = await contentfulClient.getEntry(courseRef.sys.id);
            return {
              id: course.sys.id,
              name: course.fields.courseName,
              slug: course.fields.courseSlug
            };
          } catch (error) {
            console.error(`Error fetching course ${courseRef.sys.id}:`, error);
            return null;
          }
        })
      );
      courses = courses.filter(c => c !== null);
    }
    
    return {
      name: campus.fields.campusName,
      slug: campus.fields.campusSlug,
      hasCoursesField: !!campus.fields.courses,
      coursesCount: courses.length,
      courses: courses
    };
  })
);

// Get all available paths that should be generated
const allPaths = [];
campusesWithDetails.forEach(campus => {
  // Add campus path
  allPaths.push(`/${campus.slug}`);
  
  // Add course paths
  campus.courses.forEach(course => {
    allPaths.push(`/${campus.slug}/${course.slug}`);
  });
});
---

<Layout title="Debug Contentful Data">
  <main class="container my-5">
    <h1>Contentful Data Debug</h1>
    
    <section class="mb-5">
      <h2>Campuses Found: {campuses.length}</h2>
      
      {campusesWithDetails.map((campus) => (
        <div class="campus-debug mb-4 p-3 border">
          <h3>{campus.name}</h3>
          <p><strong>Slug:</strong> {campus.slug}</p>
          <p><strong>Has Courses Field:</strong> {campus.hasCoursesField ? 'Yes' : 'No'}</p>
          <p><strong>Number of Courses:</strong> {campus.coursesCount}</p>
          
          {campus.courses.length > 0 && (
            <div class="ms-4">
              <h4>Courses:</h4>
              <ul>
                {campus.courses.map((course) => (
                  <li>
                    {course.name} (slug: {course.slug})
                  </li>
                ))}
              </ul>
            </div>
          )}
        </div>
      ))}
    </section>
    
    <section class="mb-5">
      <h2>All Paths That Should Be Generated</h2>
      <ul>
        {allPaths.map((path) => (
          <li>
            <code>{path}</code>
          </li>
        ))}
      </ul>
    </section>
    
    <section>
      <h2>Raw Campus Data (First Campus)</h2>
      {campuses.length > 0 && (
        <pre class="bg-light p-3 overflow-auto">
          {JSON.stringify(campuses[0].fields, null, 2)}
        </pre>
      )}
    </section>
  </main>
</Layout>

<style>
  .campus-debug {
    background-color: #f8f9fa;
    border-radius: 8px;
  }
  
  pre {
    max-height: 400px;
    font-size: 0.875rem;
  }
  
  code {
    background-color: #e9ecef;
    padding: 2px 6px;
    border-radius: 3px;
  }
</style>