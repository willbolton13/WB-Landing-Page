---
// pages/events.astro
import Layout from '../layouts/Layout.astro';
import EventCard from '../components/EventCard.astro';
import { 
  getUpcomingEvents,
  getPastEvents,
  getFeaturedEvents,
  getEventCategories,
  getOptimizedImageUrl,
  generateSrcSet,
  getPlaceholderImageUrl
} from '../lib/contentful';

// Fetch all events data
const [allUpcomingEvents, allFeaturedEvents, pastEvents, categories] = await Promise.all([
  getUpcomingEvents({ limit: 20 }),
  getFeaturedEvents(10), // Get multiple featured events
  getPastEvents({ limit: 10 }),
  getEventCategories()
]);

// Select the featured event - nearest upcoming featured event
let featuredEvent = null;
if (allFeaturedEvents.length > 0) {
  // Filter to only upcoming featured events
  const now = new Date();
  const upcomingFeatured = allFeaturedEvents.filter(event => {
    const eventDate = new Date(event.fields.eventDate);
    return eventDate >= now;
  });
  
  // Sort by date and take the nearest one
  if (upcomingFeatured.length > 0) {
    upcomingFeatured.sort((a, b) => {
      const dateA = new Date(a.fields.eventDate).getTime();
      const dateB = new Date(b.fields.eventDate).getTime();
      return dateA - dateB;
    });
    featuredEvent = upcomingFeatured[0];
  }
}

// Filter out the featured event from upcoming events list to avoid duplication
const upcomingEvents = featuredEvent 
  ? allUpcomingEvents.filter(event => event.sys.id !== featuredEvent.sys.id)
  : allUpcomingEvents;

// Static hero image for events page
const heroImageUrl = '/img/events-hero.webp';
---

<Layout title="Events - WaterBear Student Portal" heroImageUrl={heroImageUrl}>
  <section class="hero-section events-hero" data-hero-section>
    <div class="hero-placeholder"></div>
    <img 
      class="hero-image" 
      src={heroImageUrl} 
      alt="Events at WaterBear"
      onload="this.classList.add('loaded')"
    />
  </section>
  
  <main class="container mb-5">
    <div class="text-center page-header">
      <h1 class="hero-title hero-title--lg">EVENTS</h1>
      <p class="page-subtitle">Discover what's happening at WaterBear</p>
    </div>
    
    {/* Featured Event */}
    {featuredEvent && (
      <section class="featured-event-section">
        <div class="section-header">
          <h2>Featured Event</h2>
        </div>
        <EventCard event={featuredEvent} variant="featured" />
      </section>
    )}
    
    {/* Category Filter */}
    {categories.length > 0 && upcomingEvents.length > 0 && (
      <div class="event-filters">
        <button class="filter-btn active" data-category="all">
          All Events
        </button>
        {categories.map(category => (
          <button class="filter-btn" data-category={category}>
            {category.replace('-', ' ')}
          </button>
        ))}
      </div>
    )}
    
    {/* Upcoming Events */}
    <section class="upcoming-events-section">
      <div class="section-header">
        <h2>Upcoming Events</h2>
        <span class="event-count">{upcomingEvents.length} events</span>
      </div>
      
      {upcomingEvents.length > 0 ? (
        <div class="events-grid" id="upcoming-events">
          <div class="row">
            {upcomingEvents.map(event => (
              <div class="col-lg-4 col-md-6 mb-4 event-item" data-category={event.fields.eventCategory}>
                <EventCard event={event} variant="card" showDescription={true} />
              </div>
            ))}
          </div>
        </div>
      ) : (
        <div class="no-events">
          <p>No upcoming events at this time. Check back soon!</p>
        </div>
      )}
    </section>
    
    {/* Past Events */}
    {pastEvents.length > 0 && (
      <section class="past-events-section">
        <div class="section-header">
          <h2>Past Events</h2>
          <button class="toggle-past-events" id="past-events-toggle" aria-expanded="false" aria-controls="past-events">
            <span class="toggle-text">Show</span> past events 
            <i data-lucide="chevron-down" class="toggle-icon"></i>
          </button>
        </div>
        
        <div class="past-events-collapse" id="past-events">
          <div class="past-events-list">
            {pastEvents.map(event => (
              <EventCard event={event} variant="past" />
            ))}
          </div>
        </div>
      </section>
    )}
  </main>
</Layout>

<style>
  .events-hero {
    height: 40vh;
  }

  .hero-section {
    height: 40vh;
    overflow: hidden;
    position: relative;
    z-index: 1;
    background: #000;
  }

  .hero-placeholder {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: #000;
    z-index: 1;
  }

  .hero-image {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    object-fit: cover;
    object-position: center;
    opacity: 0;
    transition: opacity 0.6s ease-out;
    z-index: 3;
    filter: brightness(0.6);
  }

  .hero-image.loaded {
    opacity: 1;
  }

  main.container {
    position: relative;
    z-index: 2;
    margin-top: -35vh !important;
  }

  .page-header {
    min-height: 250px;
    display: flex;
    flex-direction: column;
    justify-content: flex-start;
    padding-top: 20px;
    margin-bottom: 3rem;
  }

  .page-subtitle {
    font-family: jost, sans-serif;
    text-transform: uppercase;
    color: var(--text-color);
    font-weight: 500;
    text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.7);
    font-size: 1.3rem;
    margin-top: 0.5rem;
  }

  /* Section styling */
  .featured-event-section,
  .upcoming-events-section,
  .past-events-section {
    margin-bottom: 4rem;
  }

  .section-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 2rem;
    padding-bottom: 1rem;
    border-bottom: 3px solid var(--accent-yellow);
  }

  .section-header h2 {
    font-size: 2rem;
    font-weight: 700;
    text-transform: uppercase;
    color: #000;
    margin: 0;
  }

  .event-count {
    color: #666;
    font-size: 1rem;
  }

  /* Filter buttons */
  .event-filters {
    margin-top: -20px !important;
    display: flex;
    gap: 10px;
    flex-wrap: wrap;
    justify-content: center;
    margin-bottom: 3rem;
    padding: 1.5rem;
    border: solid .3rem #000000;
    background: #ffffff
  }

  .filter-btn {
    padding: 8px 20px;
    background: white;
    color: #333;
    border: 2px solid #ddd;
    font-weight: 600;
    text-transform: uppercase;
    font-size: 0.9rem;
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .filter-btn:hover {
    border-color: var(--accent-yellow);
    transform: translateY(-2px);
  }

  .filter-btn.active {
    background: var(--accent-yellow);
    color: var(--button-text-color);
    border-color: var(--accent-yellow);
  }

  /* Events grid */
  .events-grid {
    min-height: 300px;
  }

  .event-item {
    transition: all 0.3s ease;
  }

  .event-item.hidden {
    display: none;
  }

  /* No events message */
  .no-events {
    text-align: center;
    padding: 4rem 2rem;
    background: #f9f9f9;
  }

  .no-events p {
    color: #666;
    font-size: 1.1rem;
    margin: 0;
  }

  /* Past events toggle and collapse */
  .toggle-past-events {
    background: none;
    border: none;
    color: var(--accent-red);
    font-weight: 600;
    cursor: pointer;
    display: flex;
    align-items: center;
    gap: 5px;
  }

  .toggle-icon {
    width: 20px;
    height: 20px;
    transition: transform 0.3s ease;
  }

  .toggle-past-events[aria-expanded="true"] .toggle-icon {
    transform: rotate(180deg);
  }

  .toggle-past-events[aria-expanded="true"] .toggle-text {
    content: "Hide";
  }

  .past-events-collapse {
    max-height: 0;
    overflow: hidden;
    transition: max-height 0.3s ease-out;
  }

  .past-events-collapse.show {
    max-height: 2000px;
    transition: max-height 0.5s ease-in;
  }

  .past-events-list {
    padding-top: 2rem;
  }

  h1 {
    color: var(--text-color);
    text-shadow: 2px 2px 8px rgba(0, 0, 0, 0.8);
  }

  @media (max-width: 768px) {
    .event-filters {
      padding: 1rem;
    }
    
    .filter-btn {
      font-size: 0.8rem;
      padding: 6px 15px;
    }
  }
</style>

<script>
  import { animate, inView } from "motion";

  function setupEventFilters() {
    const filterButtons = document.querySelectorAll('.filter-btn');
    const eventItems = document.querySelectorAll('.event-item');
    
    filterButtons.forEach(button => {
      button.addEventListener('click', () => {
        // Update active state
        filterButtons.forEach(btn => btn.classList.remove('active'));
        button.classList.add('active');
        
        const category = button.dataset.category;
        
        // Filter events
        eventItems.forEach(item => {
          if (category === 'all' || item.dataset.category === category) {
            item.classList.remove('hidden');
            // Animate in
            animate(item, 
              { opacity: [0, 1], scale: [0.9, 1] }, 
              { duration: 0.3 }
            );
          } else {
            // Animate out then hide
            animate(item, 
              { opacity: 0, scale: 0.9 }, 
              { duration: 0.2 }
            ).finished.then(() => {
              item.classList.add('hidden');
            });
          }
        });
      });
    });
  }

  function setupPastEventsToggle() {
    const toggleBtn = document.getElementById('past-events-toggle');
    const pastEventsSection = document.getElementById('past-events');
    const toggleText = toggleBtn?.querySelector('.toggle-text');
    
    if (toggleBtn && pastEventsSection && toggleText) {
      toggleBtn.addEventListener('click', () => {
        const isExpanded = toggleBtn.getAttribute('aria-expanded') === 'true';
        
        if (isExpanded) {
          // Collapse
          pastEventsSection.classList.remove('show');
          toggleBtn.setAttribute('aria-expanded', 'false');
          toggleText.textContent = 'Show';
        } else {
          // Expand
          pastEventsSection.classList.add('show');
          toggleBtn.setAttribute('aria-expanded', 'true');
          toggleText.textContent = 'Hide';
        }
      });
    }
  }

  function setupPageAnimations() {
    // Animate event cards on scroll
    const cards = document.querySelectorAll('.event-item');
    cards.forEach((card, index) => {
      inView(card, () => {
        animate(card, 
          { opacity: [0, 1], transform: ['translateY(30px)', 'translateY(0)'] }, 
          { duration: 0.5, delay: index * 0.05 }
        );
      }, { margin: '50px 0px' });
    });
  }

  document.addEventListener('astro:page-load', () => {
    setupEventFilters();
    setupPastEventsToggle();
    setupPageAnimations();
  });
</script>