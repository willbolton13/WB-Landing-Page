---
import Layout from '../../layouts/Layout.astro';
import StaticPortalCards from '../../components/StaticPortalCards.astro';
import { 
  getCampuses,
  getCampusWithHeroImages,
  getCourseWithFullContent,
  findIncludedEntry,
  findIncludedAsset,
  contentfulClient,
  getRotatingImage,
  getOptimizedImageUrl,
  generateSrcSet,
  getPlaceholderImageUrl
} from '../../lib/contentful';
import { documentToHtmlString } from '@contentful/rich-text-html-renderer';

// Generate static paths for all campus and campus/course combinations
export async function getStaticPaths() {
  const campuses = await getCampuses();
  const paths = [];
  
  for (const campus of campuses) {
    // Fetch campus with all needed data ONCE
    const campusWithFullData = await getCampusWithHeroImages(campus.fields.campusSlug);
    
    // Resolve courses if they exist
    let resolvedCourses = [];
    if (campusWithFullData.fields.courses && campusWithFullData.fields.courses.length > 0) {
      // Check if courses are already resolved objects
      if (campusWithFullData.fields.courses[0]?.fields) {
        resolvedCourses = campusWithFullData.fields.courses;
      } else {
        // Batch fetch all courses at once
        const courseIds = campusWithFullData.fields.courses.map(c => c.sys.id).join(',');
        const coursesResponse = await contentfulClient.getEntries({
          'sys.id[in]': courseIds,
          content_type: 'location',
          include: 1
        });
        resolvedCourses = coursesResponse.items;
      }
      // Sort courses
      resolvedCourses.sort((a, b) => 
        (a.fields.displayOrder || 0) - (b.fields.displayOrder || 0)
      );
    }
    
    // Resolve custom portal buttons if they exist
    let customPortalButtons = [];
    if (campusWithFullData.fields.useCustomButtons && campusWithFullData.fields.customPortalButtons) {
      // Check if buttons are already resolved
      if (campusWithFullData.fields.customPortalButtons[0]?.fields) {
        customPortalButtons = campusWithFullData.fields.customPortalButtons;
      } else {
        // Batch fetch buttons
        const buttonIds = campusWithFullData.fields.customPortalButtons.map(b => b.sys.id).join(',');
        const buttonsResponse = await contentfulClient.getEntries({
          'sys.id[in]': buttonIds
        });
        customPortalButtons = buttonsResponse.items;
      }
    }
    
    // Add campus landing page path with all data as props
    paths.push({
      params: { 
        campus: campus.fields.campusSlug,
        course: undefined
      },
      props: {
        campusData: campusWithFullData,
        courses: resolvedCourses,
        customPortalButtons,
        isCampusPage: true,
        courseData: null,
        courseResponse: null
      }
    });
    
    // Add course paths with their data
    for (const course of resolvedCourses) {
      // Fetch full course content
      const courseResponse = await getCourseWithFullContent(
        campus.fields.campusSlug, 
        course.fields.courseSlug
      );
      
      paths.push({
        params: { 
          campus: campus.fields.campusSlug,
          course: course.fields.courseSlug
        },
        props: {
          campusData: campusWithFullData,
          courses: resolvedCourses,
          customPortalButtons,
          isCampusPage: false,
          courseData: courseResponse?.items?.[0] || null,
          courseResponse: courseResponse
        }
      });
    }
  }
  
  return paths;
}

// Get all data from props instead of fetching again
const { 
  campusData, 
  courses, 
  customPortalButtons,
  isCampusPage,
  courseData,
  courseResponse
} = Astro.props;

// Get params for potential redirects or error handling
const { campus } = Astro.params;
const courseSlug = Astro.params.course;

// Redirect if no campus data (shouldn't happen with static generation)
if (!campusData) {
  return Astro.redirect('/');
}

// Set page title based on page type
const pageTitle = isCampusPage 
  ? (campusData.fields.welcomeHeading || `Welcome ${campusData.fields.campusName} Students`)
  : (courseData ? (courseData.fields.pageTitle || courseData.fields.courseName) : 'Course');

// ============= HERO IMAGE SELECTION =============
// Select hero image using time-based rotation
let heroImage = null;
let heroImageUrl = null;
let heroImageSrcSet = null;
let heroImageAlt = 'Campus hero image';
let placeholderUrl = null;

// Check if campus has hero images
if (campusData.fields.heroImagePool && campusData.fields.heroImagePool.length > 0) {
  // Create unique key for this page (different image for campus vs course pages)
  const pageKey = isCampusPage ? campus : `${campus}-${courseSlug}`;
  
  // Get rotating image (changes daily)
  heroImage = getRotatingImage(
    campusData.fields.heroImagePool, 
    pageKey, 
    'daily'
  );
  
  if (heroImage) {
    // Generate optimized URLs for different screen sizes
    heroImageUrl = getOptimizedImageUrl(heroImage, { 
      width: 1920, 
      quality: 85,
      format: 'webp'
    });
    
    // Generate srcset for responsive images
    heroImageSrcSet = generateSrcSet(heroImage, [640, 768, 1024, 1366, 1920, 2560]);
    
    // Generate placeholder for blur-up effect
    placeholderUrl = getPlaceholderImageUrl(heroImage);
    
    // Use image description if available
    heroImageAlt = heroImage.fields.description || heroImage.fields.title || heroImageAlt;
  }
}

// Fallback to static image if no hero images available
if (!heroImageUrl) {
  heroImageUrl = '/img/hn-1536x796.jpg.webp';
}
---

<Layout title={pageTitle} heroImageUrl={heroImageUrl}>
  <section class="hero-section" data-hero-section>
    <!-- Black placeholder background -->
    <div class="hero-placeholder"></div>
    
    <!-- Blur placeholder (loads immediately) -->
    {placeholderUrl && (
      <div 
        class="hero-blur"
        style={`background-image: url('${placeholderUrl}')`}
      ></div>
    )}
    
    <!-- Main hero image -->
    {heroImage ? (
      <picture class="hero-picture">
        <!-- WebP for modern browsers -->
        <source
          type="image/webp"
          srcset={heroImageSrcSet}
          sizes="100vw"
        />
        <!-- JPEG fallback -->
        <source
          type="image/jpeg"
          srcset={generateSrcSet(heroImage, [640, 768, 1024, 1366, 1920, 2560])}
          sizes="100vw"
        />
        <!-- Default img tag -->
        <img 
          class="hero-image"
          src={heroImageUrl}
          alt={heroImageAlt}
          loading="eager"
          fetchpriority="high"
          width="1920"
          height="1080"
          onload="this.classList.add('loaded')"
        />
      </picture>
    ) : (
      <!-- Fallback static image -->
      <img 
        class="hero-image" 
        src={heroImageUrl} 
        alt={heroImageAlt}
        onload="this.classList.add('loaded')"
      />
    )}
  </section>
  
  <main class="container mb-5">
    {isCampusPage ? (
      // CAMPUS PAGE CONTENT
      <>
        <div class="text-center">
          <h1 class="display-4">{pageTitle}</h1>
          
          {/* Course Selection - Simple buttons right under the header */}
          {courses && courses.length > 0 && (
            <div class="course-selection">
              {courses.length > 1 && (
                <p class="course-prompt">Select your course:</p>
              )}
              <div class="course-buttons">
                {courses.map((courseItem) => (
                  <a 
                    href={`/${campus}/${courseItem.fields.courseSlug}`}
                    class="course-btn"
                  >
                    {courseItem.fields.courseName}
                  </a>
                ))}
              </div>
            </div>
          )}
        </div>
        
        {/* Portal Cards - either custom or static based on campus settings */}
        {campusData.fields.useCustomButtons && customPortalButtons.length > 0 ? (
          <>
            {/* Custom portal buttons for this campus */}
            <div class="row g-4 justify-content-center mb-4">
              {customPortalButtons.map((button) => (
                <div class="col-lg-6 col-md-6">
                  <a href={button.fields.link} target="_blank" class="portal-card custom-portal-card">
                    <div class="portal-card-icon">
                      <i data-lucide={button.fields.icon || 'square'}></i>
                    </div>
                    <h3>{button.fields.buttonText}</h3>
                    <p class="portal-card-subtitle">{button.fields.buttonSubtitle || ''}</p>
                  </a>
                </div>
              ))}
            </div>
          </>
        ) : (
          // Default static portal cards
          <StaticPortalCards />
        )}
      
      </>
    ) : courseData ? (
      // COURSE PAGE CONTENT
      <>
        <div class="text-center">
          <h1 class="display-4">{pageTitle}</h1>
          <p class="course-subtitle">{courseData.fields.courseName}</p>
        </div>
        
        {/* Portal Cards - use campus custom buttons if available */}
        {campusData.fields.useCustomButtons && customPortalButtons.length > 0 ? (
          <div class="row g-4 justify-content-center mb-4">
            {customPortalButtons.map((button) => (
              <div class="col-lg-6 col-md-6">
                <a href={button.fields.link} target="_blank" class="portal-card custom-portal-card">
                  <div class="portal-card-icon">
                    <i data-lucide={button.fields.icon || 'square'}></i>
                  </div>
                  <h3>{button.fields.buttonText}</h3>
                  <p class="portal-card-subtitle">{button.fields.buttonSubtitle || ''}</p>
                </a>
              </div>
            ))}
          </div>
        ) : (
          <StaticPortalCards />
        )}
        
        {/* Dynamic Course Buttons */}
        {courseData.fields.locationButtons && courseData.fields.locationButtons.length > 0 && (
          <div class="row g-4 justify-content-center mb-4">
            {courseData.fields.locationButtons.map((buttonRef) => {
              const button = findIncludedEntry(courseResponse.includes, buttonRef.sys.id);
              if (!button) return null;
              
              return (
                <div class="portal-cards-container col-lg-6 col-md-6">
                  <a href={button.fields.link} target="_blank" class="portal-card portal-card-green">
                    <div class="portal-card-icon">
                      <i data-lucide={button.fields.icon || 'square'}></i>
                    </div>
                    <h3>{button.fields.buttonText}</h3>
                    <p class="portal-card-subtitle">{button.fields.buttonSubtitle || ''}</p>
                  </a>
                </div>
              );
            })}
          </div>
        )}
        
        <!-- Information Blocks Section -->
        {courseData.fields.informationBlocks && courseData.fields.informationBlocks.length > 0 && (
          <div>
            {courseData.fields.informationBlocks.map((blockRef, index) => {
              const block = findIncludedEntry(courseResponse.includes, blockRef.sys.id);
              if (!block) return null;
              
              const imageAsset = block.fields.image ? 
                findIncludedAsset(courseResponse.includes, block.fields.image.sys.id) : null;
              const imageUrl = imageAsset ? 
                `https:${imageAsset.fields.file.url}?w=1200&q=80` : null;
              
              const contentHtml = block.fields.content 
                ? documentToHtmlString(block.fields.content)
                  : '';
              
              // Determine layout based on whether image exists
              const hasImage = !!imageUrl;
              const layoutClass = hasImage && index % 2 === 1 ? 'image-left' : '';
              
              return (
                <div class={`content-block ${layoutClass} ${!hasImage ? 'no-image' : ''}`}>
                  {hasImage ? (
                    // Layout WITH image
                    <div class="row align-items-center justify-content-between">
                      <div class="col-md-7 content-block-text">
                        <h2>{block.fields.heading}</h2>
                        <div set:html={contentHtml}></div>
                      </div>
                      <div class="col-md-5 content-block-image">
                        <img src={imageUrl} class="img-fluid rounded" alt={block.fields.heading}>
                        {block.fields.buttonText && block.fields.buttonLink && (
                          <a href={block.fields.buttonLink} target="_blank" class="overlap-btn">
                            {block.fields.buttonText}
                          </a>
                        )}
                      </div>
                    </div>
                  ) : (
                    // Layout WITHOUT image - full width, left-aligned to match
                    <div class="row">
                      <div class="col-md-12 content-block-text">
                        <h2>{block.fields.heading}</h2>
                        <div set:html={contentHtml}></div>
                        {block.fields.buttonText && block.fields.buttonLink && (
                          <div class="button-container">
                            <a href={block.fields.buttonLink} target="_blank" class="overlap-btn position-relative">
                              {block.fields.buttonText}
                            </a>
                          </div>
                        )}
                      </div>
                    </div>
                  )}
                </div>
              );
            })}
          </div>
        )}
        
        {/* Staff Section */}
        {courseData.fields.centreStaff && courseData.fields.centreStaff.length > 0 && (
          <div class="staff-section">
            <div class="section-divider"></div>
            <div class="row">
              {courseData.fields.centreStaff.map((staffRef) => {
                const staff = findIncludedEntry(courseResponse.includes, staffRef.sys.id);
                if (!staff) return null;
                
                const photoAsset = staff.fields.photo ? 
                  findIncludedAsset(courseResponse.includes, staff.fields.photo.sys.id) : null;
                const photoUrl = photoAsset ? 
                  `https:${photoAsset.fields.file.url}?w=1000&h=1000&fit=crop&f=face&q=50` : 
                  `https://placehold.co/300x300/DE0029/FFFFFF?text=${encodeURIComponent(staff.fields.fullName.charAt(0))}`;
                
                return (
                  <div class="col-lg-3 col-md-6 col-sm-12 mb-4">
                    <div class="staff-member">
                      <div class="staff-photo">
                        <img src={photoUrl} alt={staff.fields.fullName} class="img-fluid">
                      </div>
                      <div class="staff-info">
                        <h4 class="staff-name">{staff.fields.fullName}</h4>
                        <p class="staff-title">{staff.fields.jobTitle}</p>
                        <a href={`mailto:${staff.fields.staffEmail}`} class="staff-email">
                          {staff.fields.staffEmail}
                        </a>
                      </div>
                    </div>
                  </div>
                );
              })}
            </div>
          </div>
        )}
      </>
    ) : (
      // ERROR STATE
      <div class="text-center">
        <h1>Course Not Found</h1>
        <p>
          <a href={`/${campus}`} class="btn btn-secondary">← Back to {campusData.fields.campusName} Campus</a>
        </p>
      </div>
    )}
  </main>
</Layout>

<style>
  /* Hero section with blur-up effect */
  .hero-section {
    height: 55vh;
    overflow: hidden;
    position: relative;
    z-index: 1;
    background: #000; /* Black background */
  }

  /* Black placeholder - always visible */
  .hero-placeholder {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: #000;
    z-index: 1;
  }

  /* Blur placeholder - loads immediately */
  .hero-blur {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-size: cover;
    background-position: center;
    filter: blur(20px);
    transform: scale(1.1); /* Slightly scale to hide blur edges */
    opacity: 0.7;
    z-index: 2;
    transition: opacity 0.3s ease-out;
  }

  /* Hide blur when main image loads */
  .hero-section:has(.hero-image.loaded) .hero-blur {
    opacity: 0;
  }

  /* Fallback for browsers that don't support :has() */
  @supports not selector(:has(*)) {
    .hero-blur {
      animation: fadeOut 0.6s ease-out 0.5s forwards;
    }
    
    @keyframes fadeOut {
      to {
        opacity: 0;
      }
    }
  }

  .hero-image.loaded {
    opacity: 1;
  }

  /* Rest of your existing styles remain the same... */
  main.container {
    position: relative;
    z-index: 2;
    margin-top: -50vh !important;
  }

  .text-center {
    min-height: 300px;
    display: flex;
    flex-direction: column;
    justify-content: flex-start;
    padding-top: 20px;
  }

  .course-subtitle {
    color: var(--text-color);
    font-weight: 700;
    text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.7);
    font-size: 1.5rem;
    text-transform: uppercase;
    margin-top: 0.5rem;
  }

  /* Course selection - simple white outline buttons */
  .course-selection {
    margin-bottom: 2rem;
  }

  .course-prompt {
    font-family: "jost", sans-serif;
    color: var(--text-color);
    font-size: 1.6rem;
    font-weight: 500;
    margin-top: 0.5rem;
    margin-bottom: 1rem;
    text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.6);
  }

  .course-buttons {
    display: flex;
    gap: 1rem;
    justify-content: center;
    flex-wrap: wrap;
  }

  .course-btn {
    padding: 0.75rem 2rem;
    background-color: var(--button-text-color);
    color: var(--text-color);
    text-decoration: none;
    font-weight: 700;
    font-size: 1.6rem;
    border-radius: 3px;
    text-transform: uppercase;
    transition: all 0.2s ease;
    box-shadow: 2px 4px 4px rgba(0, 0, 0, 0.7);
    display: inline-block;
  }

  .course-btn:hover {
    background-color: var(--text-color);
    color: var(--button-text-color);
    transform: scale(1.05);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.4);
    text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.0);
  }

  .alert {
    max-width: 600px;
    margin: 3rem auto;
  }
  /* Content blocks */
  .content-block {
    margin-bottom: 3rem;
  }

  .content-block-text h2,
  .content-block-text p {
    color: #000;
    text-shadow: none;
  }

  .content-block-text h2{
    font-size: 1.5rem;
    font-weight: 700;
    text-transform: uppercase;
    font-family: "Futura pt", sans-serif;
  }

  @media (min-width: 768px) {
    .content-block.image-left .content-block-text {
      order: 2;
    }
    .content-block.image-left .content-block-image {
      order: 1;
    }
  }

  .content-block-image {
    position: relative;
  }

  .overlap-btn {
    position: absolute;
    bottom: -10px;
    right: 20px;
    background-color: var(--accent-green);
    color: var(--text-color);
    padding: 10px 25px;
    border-radius: 2px;
    font-weight: 700;
    text-decoration: none;
    transition: all 0.2s ease;
  }

  .overlap-btn:hover {

    box-shadow: 0 10px 20px rgba(0,0,0,0.2);
    transform: scale(1.05);
  }

  /* Staff section */
  .staff-section {
    margin-top: 4rem;
  }

  .section-divider {
    height: 3px;
    background-color: var(--button-text-color);
    margin: 2rem 0 3rem 0;
    border-radius: 2px;
  }

  .staff-member {
    text-align: center;
    padding: 1rem;
    transition: transform 0.2s ease, box-shadow 0.2s ease;
  }

  .staff-member:hover {
    transform: translateY(-5px);
    box-shadow: 0 10px 25px rgba(0,0,0,0.1);
  }

  .staff-photo {
    width: 120px;
    height: 120px;
    margin: 0 auto 1rem auto;
    border-radius: 8px;
    overflow: hidden;
    background-color: var(--accent-red);
  }

  .staff-photo img {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .staff-info {
    color: #000;
  }

  .staff-name {
    font-size: 1.2rem;
    font-weight: 700;
    margin-bottom: 0.25rem;
    color: #000;
    text-transform: uppercase;
  }

  .staff-title {
    font-size: 1rem;
    color: #666;
    margin-bottom: 0.5rem;
  }

  .staff-email {
    font-size: 0.9rem;
    color: var(--accent-red);
    text-decoration: none;
    font-weight: 600;
    transition: color 0.2s ease;
  }

  .staff-email:hover {
    color: var(--accent-green);
    text-decoration: underline;
  }

  .btn {
    display: inline-block;
    padding: 0.75rem 1.5rem;
    text-decoration: none;
    border-radius: 5px;
    font-weight: 600;
    transition: all 0.2s ease;
  }

  .btn-primary {
    background-color: var(--accent-green);
    color: var(--text-color);
  }

  .btn-primary:hover {
    background-color: var(--text-color);
    color: var(--button-text-color);
    transform: translateY(-2px);
  }

  .btn-secondary {
    background-color: var(--accent-yellow);
    color: var(--button-text-color);
  }

  .btn-secondary:hover {
    background-color: var(--text-color);
    color: var(--button-text-color);
    transform: translateY(-2px);
  }

  /* Button container for no-image blocks */
  .content-block.no-image .button-container {
    display: flex;
    justify-content: flex-end;
    margin-top: 1rem;
  }

  /* Make the button position relative when no image */
  .content-block.no-image .overlap-btn.position-relative {
    position: relative;
    bottom: auto;
    right: auto;
  }

  /* Optional: Add some padding to no-image blocks if needed */
  .content-block.no-image {
    padding: 1rem 0;
  }

  @media (max-width: 768px) {
    .course-buttons {
      flex-direction: column;
      align-items: center;
    }

    .btn-course {
      width: 100%;
      max-width: 300px;
    }
  }

    h1, .lead {
    color: var(--text-color);
    text-shadow: 2px 2px 8px rgba(0, 0, 0, 0.8);
  }
</style>

<!-- Keep your existing script section as-is -->
<script>
  import { animate, inView } from "motion";

  function setupPageAnimationsAdvanced() {
    const animationConfig = {
      initialY: '30px',
      duration: 0.5,
      ease: 'ease-out',
      margin: '50px 0px',
      staggerAmount: 0.07,
      visibilityThreshold: 0.1
    };

    function applyScrollAnimation(element, index, calculateDelay) {
      const observer = new IntersectionObserver(
        (entries) => {
          const entry = entries[0];
          
          if (entry.isIntersecting && entry.intersectionRatio >= animationConfig.visibilityThreshold) {
            observer.disconnect();
          } else {
            element.style.opacity = '0';
            element.style.transform = `translateY(${animationConfig.initialY})`;
            
            const delay = calculateDelay(index, animationConfig.staggerAmount);
            
            observer.disconnect();
            
            inView(element, () => {
              animate(element, 
                { opacity: 1, transform: 'translateY(0px)' }, 
                { duration: animationConfig.duration, ease: animationConfig.ease, delay: delay }
              );
            }, { margin: animationConfig.margin });
          }
        },
        { threshold: animationConfig.visibilityThreshold }
      );
      
      observer.observe(element);
    }

    requestAnimationFrame(() => {
      document.querySelectorAll('.portal-card').forEach((el, i) => {
        applyScrollAnimation(el, i, (index, stagger) => index * stagger);
      });

      document.querySelectorAll('.course-btn').forEach((el, i) => {
        applyScrollAnimation(el, i, (index, stagger) => index * stagger * 0.5);
      });

      document.querySelectorAll('.content-block').forEach((el, i) => {
        applyScrollAnimation(el, i, () => 0);
      });

      document.querySelectorAll('.staff-member').forEach((el, i) => {
        applyScrollAnimation(el, i, (index, stagger) => (index % 4) * stagger);
      });
    });
  }

  document.addEventListener('astro:page-load', setupPageAnimationsAdvanced);
</script>