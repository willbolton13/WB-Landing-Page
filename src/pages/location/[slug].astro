---
import Layout from '../../layouts/Layout.astro';
import StaticPortalCards from '../../components/StaticPortalCards.astro';
import { getLocations, getAllLocationData } from '../../lib/contentful';

// This function runs at build time and creates all the location pages
export async function getStaticPaths() {
  const locations = await getLocations();
  
  // Create a path for each location
  return locations.map((location) => {
    // Convert "Brighton BA" to "brighton-ba" for the URL
    const slug = location.fields.locationName
      .toLowerCase()
      .replace(/\s+/g, '-');
    
    return {
      params: { slug },
      props: { 
        locationName: location.fields.locationName,
        locationId: location.sys.id
      }
    };
  });
}

// Get the props from getStaticPaths
const { locationName, locationId } = Astro.props;

// Fetch all location data with includes
const allData = await getAllLocationData();

// Find this specific location with all its related content
const locationData = allData.items.find(item => item.sys.id === locationId);
const includes = allData.includes;

// Helper function to find included entries
function findIncludedEntry(id) {
  return includes?.Entry?.find(entry => entry.sys.id === id);
}

// Helper function to find included assets
function findIncludedAsset(id) {
  return includes?.Asset?.find(asset => asset.sys.id === id);
}

// Extract the location fields
const fields = locationData.fields;
const pageTitle = fields.pageTitle || `Welcome ${locationName} Students`;
---

<Layout title={pageTitle}>
  
  <section class="hero-section">
    <img src="/img/hn-1536x796.jpg.webp" alt="Hero image">
  </section>
  
  <main class="container my-5">
    <div class="text-center mb-5">
      <h1 class="display-4">{pageTitle}</h1>
      <p class="lead location-prompt">
        <nav aria-label="breadcrumb" class="location-breadcrumb">
        <ol class="breadcrumb justify-content-center">
            <li class="breadcrumb-item"><a href="/">All Locations</a></li>
            <li class="breadcrumb-item active">{locationName}</li>
        </ol>
        </nav>
      </p>
    </div>
    
    <!-- Use the static portal cards component -->
    <StaticPortalCards />
    
    <!-- Dynamic Location Buttons -->
    {fields.locationButtons && fields.locationButtons.length > 0 && (
      <div class="row g-4 justify-content-center mb-4">
        {fields.locationButtons.map((buttonRef) => {
          const button = findIncludedEntry(buttonRef.sys.id);
          if (!button) return null;
          
          return (
            <div class="col-lg-6 col-md-6">
              <a href={button.fields.link} target="_blank" class="portal-card portal-card-green">
                <div class="portal-card-icon">
                  <i data-lucide={button.fields.icon || 'square'}></i>
                </div>
                <h3>{button.fields.buttonText}</h3>
                <p class="portal-card-subtitle">{button.fields.buttonSubtitle || ''}</p>
              </a>
            </div>
          );
        })}
      </div>
    )}
    
    <!-- Information Blocks -->
    {fields.informationBlocks && fields.informationBlocks.length > 0 && (
      <div>
        {fields.informationBlocks.map((blockRef, index) => {
          const block = findIncludedEntry(blockRef.sys.id);
          if (!block) return null;
          
          const imageAsset = block.fields.image ? 
            findIncludedAsset(block.fields.image.sys.id) : null;
          const imageUrl = imageAsset ? 
            `https:${imageAsset.fields.file.url}` : 
            'https://placehold.co/600x400';
          
          // Extract text from Contentful rich text
          const contentText = block.fields.content?.content
            ?.map(node => node.content?.map(innerNode => innerNode.value).join(''))
            ?.join('<br>') || '';
          
          const layoutClass = index % 2 === 1 ? 'image-left' : '';
          
          return (
            <div class={`content-block ${layoutClass}`}>
              <div class="row align-items-center justify-content-between">
                <div class="col-md-7 content-block-text">
                  <h2>{block.fields.heading}</h2>
                  <p set:html={contentText}></p>
                </div>
                <div class="col-md-5 content-block-image">
                  <img src={imageUrl} class="img-fluid rounded" alt={block.fields.heading}>
                  {block.fields.buttonText && block.fields.buttonLink && (
                    <a href={block.fields.buttonLink} target="_blank" class="overlap-btn">
                      {block.fields.buttonText}
                    </a>
                  )}
                </div>
              </div>
            </div>
          );
        })}
      </div>
    )}
    
    <!-- Staff Section -->
    {fields.centreStaff && fields.centreStaff.length > 0 && (
      <div class="staff-section">
        <div class="section-divider"></div>
        <div class="row">
          {fields.centreStaff.map((staffRef) => {
            const staff = findIncludedEntry(staffRef.sys.id);
            if (!staff) return null;
            
            const photoAsset = staff.fields.photo ? 
              findIncludedAsset(staff.fields.photo.sys.id) : null;
            const photoUrl = photoAsset ? 
              `https:${photoAsset.fields.file.url}` : 
              `https://placehold.co/300x300/DE0029/FFFFFF?text=${encodeURIComponent(staff.fields.fullName.charAt(0))}`;
            
            return (
              <div class="col-lg-3 col-md-6 col-sm-12 mb-4">
                <div class="staff-member">
                  <div class="staff-photo">
                    <img src={photoUrl} alt={staff.fields.fullName} class="img-fluid">
                  </div>
                  <div class="staff-info">
                    <h4 class="staff-name">{staff.fields.fullName}</h4>
                    <p class="staff-title">{staff.fields.jobTitle}</p>
                    <a href={`mailto:${staff.fields.staffEmail}`} class="staff-email">
                      {staff.fields.staffEmail}
                    </a>
                  </div>
                </div>
              </div>
            );
          })}
        </div>
      </div>
    )}
  </main>
  
</Layout>

<style>
  /* Page-specific styles */
  .hero-section {
    height: 55vh;
    overflow: hidden;
    position: relative;
    z-index: 1;
  }

  .hero-section img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    object-position: center;
  }

  main.container {
    position: relative;
    z-index: 2;
    margin-top: -40vh !important;
  }

  h1, .lead {
    color: var(--text-color);
    text-shadow: 2px 2px 8px rgba(0, 0, 0, 0.8);
  }

  .location-prompt {
    color: var(--accent-yellow);
    font-weight: 500;
    text-shadow: 3px 3px 3px rgba(0, 0, 0, 0.7);
    font-size: 1.6rem;
    text-transform: uppercase;
  }

  .display-4 {
    font-weight: 700;
    text-transform: uppercase;
  }

  /* Green variant for dynamic buttons */
  .portal-card-green {
    background-color: var(--accent-green);
    color: var(--text-color);
  }

  /* Content blocks */
  .content-block {
    margin-bottom: 3rem;
  }

  .content-block:last-child {
    margin-bottom: 2rem;
  }

  .content-block-text h2,
  .content-block-text p {
    color: #000;
    text-shadow: none;
  }

  @media (min-width: 768px) {
    .content-block.image-left .content-block-text {
      order: 2;
    }
    .content-block.image-left .content-block-image {
      order: 1;
    }
  }

  .content-block-image {
    position: relative;
  }

  .overlap-btn {
    position: absolute;
    bottom: -10px;
    right: 20px;
    display: inline-block;
    width: auto;
    background-color: var(--accent-green);
    color: var(--text-color);
    padding: 10px 25px;
    border-radius: 5px;
    font-weight: 700;
    text-decoration: none;
    transition: all 0.2s ease-in-out;
  }

  .overlap-btn:hover {
    background-color: var(--text-color);
    color: var(--button-text-color);
    transform: scale(1.05);
  }

  /* Staff section */
  .staff-section {
    margin-top: 4rem;
  }

  .section-divider {
    height: 3px;
    background-color: var(--accent-yellow);
    margin: 2rem 0 3rem 0;
    border-radius: 2px;
  }

  .staff-member {
    text-align: center;
    padding: 1rem;
    transition: transform 0.2s ease, box-shadow 0.2s ease;
  }

  .staff-member:hover {
    transform: translateY(-5px);
    box-shadow: 0 10px 25px rgba(0,0,0,0.1);
  }

  .staff-photo {
    width: 120px;
    height: 120px;
    margin: 0 auto 1rem auto;
    border-radius: 8px;
    overflow: hidden;
    background-color: var(--accent-red);
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .staff-photo img {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .staff-info {
    color: #000;
  }

  .staff-name {
    font-size: 1.2rem;
    font-weight: 700;
    margin-bottom: 0.25rem;
    color: #000;
    text-transform: uppercase;
  }

  .staff-title {
    font-size: 1rem;
    color: #666;
    margin-bottom: 0.5rem;
    font-weight: 400;
  }

  .staff-email {
    font-size: 0.9rem;
    color: var(--accent-red);
    text-decoration: none;
    font-weight: 600;
    transition: color 0.2s ease;
  }

  .staff-email:hover {
    color: var(--accent-green);
    text-decoration: underline;
  }

  @media (max-width: 992px) {
    .location-prompt {
      font-size: 1.4rem;
    }
  }

  @media (max-width: 768px) {
    .location-prompt {
      font-size: 1.2rem;
    }
  }

  /* Add these portal card styles for dynamic buttons */
.portal-card {
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  height: 250px;
  padding: 20px;
  text-align: center;
  text-decoration: none;
  border-radius: 8px;
  background-color: var(--accent-green);
  color: var(--background-color);
}

.portal-card:hover {
  background-color: var(--text-color);
  color: var(--button-text-color);
  transform: translateY(-5px);
  box-shadow: 0 10px 20px rgba(0,0,0,0.2);
}

.portal-card h3 {
  font-size: 1.5rem;
  font-weight: 700;
  text-transform: uppercase;
  margin-top: 0;
  margin-bottom: 0.25rem;
  color: inherit;
}

.portal-card-subtitle {
  font-size: 0.9rem;
  font-weight: 400;
  text-transform: none;
  margin: 0;
  color: inherit;
  max-width: 90%;
}

.portal-card-icon {
  color: inherit;
  height: 30%;
  width: 30%;
  display: flex;
  align-items: center;
  justify-content: center;
}

.portal-card-icon svg {
  margin-bottom: 30px;
  width: var(--icon-size);
  height: var(--icon-size);
  stroke: currentColor;
}

.location-breadcrumb {
    margin-bottom: 20px;
    font-size: 1.2rem;
  }

.breadcrumb-item a {
  color: var(--accent-red); 

}

.breadcrumb-item a:hover {
  text-decoration: underline;
    color: var(--background-color);
    transform: scale(1.05);
    
}
.breadcrumb-item {
    color: var(--accent-yellow);
    font-weight: 400;
    text-shadow: 3px 3px 3px rgba(0, 0, 0, 0.7);
    font-size: 1.2rem;
    text-transform: uppercase;
  }

</style>

// File: [slug].astro
<script>
  import { animate, inView } from "motion";

  // 1. All animation logic is wrapped in this function
  function setupLocationPageAnimations() {
    
    // --- STEP 1: Central Animation Configuration ---
    // Change any value here to affect all animations at once.
    const animationConfig = {
      initialY: '30px',        // The starting vertical offset
      duration: 0.5,           // The speed of the animation
      ease: 'ease-out',        // The "personality" of the animation
      margin: '50px 0px',     // The trigger margin for scrolling
      staggerAmount: 0.07      // The time (in seconds) between staggered items
    };

    // --- STEP 2: Reusable Helper Function ---
    // This function contains all the repeated logic.
    function applyScrollAnimation(element, index, calculateDelay) {
      // Set the element's starting state (hidden and moved down)
      element.style.opacity = '0';
      element.style.transform = `translateY(${animationConfig.initialY})`;
      
      // Calculate the specific delay for this element using the provided function
      const delay = calculateDelay(index, animationConfig.staggerAmount);
      
      // Set up the scroll trigger
      inView(element, () => {
        // Animate to the final state (visible and in original position)
        animate(element, 
          { opacity: 1, transform: 'translateY(0px)' }, 
          { duration: animationConfig.duration, ease: animationConfig.ease, delay: delay }
        );
      }, { margin: animationConfig.margin });
    }

    // --- STEP 3: Simplified, Streamlined Calls ---
    // Now we just call our helper for each group of elements,
    // telling it how to calculate the delay for that specific group.

    // Animate all portal cards with a progressive stagger
    document.querySelectorAll('.portal-card').forEach((el, i) => {
      applyScrollAnimation(el, i, (index, stagger) => index * stagger);
    });

    // Animate content blocks with no stagger (delay is always 0)
    document.querySelectorAll('.content-block').forEach((el, i) => {
      applyScrollAnimation(el, i, () => 0);
    });

    // Animate staff members with a repeating stagger for rows of 4
    document.querySelectorAll('.staff-member').forEach((el, i) => {
      applyScrollAnimation(el, i, (index, stagger) => (index % 4) * stagger);
    });
  }

  // 2. Call the main function on page load
  document.addEventListener('astro:page-load', setupLocationPageAnimations);
</script>