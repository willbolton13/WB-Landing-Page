---
import { getNavigationContent } from '../lib/contentful';

// Single API call to get all navigation content
const navigationData = await getNavigationContent();
const { campuses: campusesWithResolvedCourses, resources } = navigationData;

// Sort campuses by display order
campusesWithResolvedCourses.sort((a, b) => 
  (a.fields.displayOrder || 0) - (b.fields.displayOrder || 0)
);

// Sort courses within each campus
campusesWithResolvedCourses.forEach(campus => {
  if (campus.fields.courses && campus.fields.courses.length > 0) {
    campus.fields.courses.sort((a, b) => 
      (a.fields.displayOrder || 0) - (b.fields.displayOrder || 0)
    );
  }
});

// Filter resources to only those with displayOnMenu = true, then sort
const menuResources = resources
  .filter(resource => resource.fields.displayOnMenu === true)
  .sort((a, b) => (a.fields.displayOrder || 0) - (b.fields.displayOrder || 0));

// Parse current URL to determine campus, course, or resource
const currentPath = Astro.url.pathname;
const pathParts = currentPath.split('/').filter(Boolean);
const isHomePage = currentPath === '/' || pathParts.length === 0;
const currentCampusSlug = !isHomePage ? pathParts[0] : null;
const currentCourseSlug = !isHomePage && pathParts.length > 1 ? pathParts[1] : null;

// Find current campus, course, or resource names
let currentCampusName = null;
let currentCourseName = null;
let currentResourceName = null;

if (currentCampusSlug) {
  // Check if it's a campus
  const campus = campusesWithResolvedCourses.find(c => c.fields.campusSlug === currentCampusSlug);
  if (campus) {
    currentCampusName = campus.fields.campusName;
    
    if (currentCourseSlug && campus.fields.courses) {
      const course = campus.fields.courses.find(c => c.fields.courseSlug === currentCourseSlug);
      if (course) {
        currentCourseName = course.fields.courseName;
      }
    }
  } else {
    // Check if it's a resource (check all resources, not just menu ones)
    const resource = resources.find(r => r.fields.resourceSlug === currentCampusSlug);
    if (resource) {
      currentResourceName = resource.fields.resourceName;
    }
  }
}
---

<header class="py-3">
    <div class="container d-flex justify-content-between align-items-center">
        <a href="/">
            <img src="/img/white-hori@4x.png" alt="University Logo" style="height: 50px;">
        </a>
        
        <div class="location-status d-none d-md-flex align-items-center gap-2">
            <i class="bi-geo-alt-fill" data-lucide="map-pin-house"></i>
            {currentCampusName ? (
                <span>
                    Campus: <strong class="text-warning">{currentCampusName}</strong>
                    {currentCourseName && (
                        <span class="course-indicator"> | {currentCourseName}</span>
                    )}
                </span>
            ) : currentResourceName ? (
                <span>
                    <strong class="text-warning">{currentResourceName}</strong>
                </span>
            ) : (
                <span><strong>Select your campus to get started</strong></span>
            )}
        </div>
        
        <button 
            class="location-hamburger-btn d-flex align-items-center gap-2" 
            type="button" 
            data-bs-toggle="offcanvas" 
            data-bs-target="#offcanvasNavbar" 
            aria-controls="offcanvasNavbar" 
            aria-label="Toggle navigation"
        >Menu
             <i data-lucide="menu"></i>
        </button>
        
        <div class="offcanvas offcanvas-end" tabindex="-1" id="offcanvasNavbar" aria-labelledby="offcanvasNavbarLabel">
            <div class="offcanvas-header">
                <img src="/img/Logo-bear-black.png" alt="University Logo" style="height: 25px;">
                <button type="button" class="btn-close" data-bs-dismiss="offcanvas" aria-label="Close"></button>
            </div>
            
            <div class="offcanvas-body location-list">
                <h5 class="offcanvas-title" id="offcanvasNavbarLabel">CAMPUS SELECTION</h5>
                <!-- Campuses Section -->
                {campusesWithResolvedCourses.map((campus) => {
                    const campusSlug = campus.fields.campusSlug;
                    const hasCourses = campus.fields.courses && campus.fields.courses.length > 0;
                    
                    return (
                        <div class="campus-group" data-campus={campusSlug}>
                            {hasCourses ? (
                                <>
                                    <div class="campus-header-wrapper">
                                        <a 
                                            href={`/${campusSlug}`}
                                            class="campus-header"
                                            data-campus-link={campusSlug}
                                        >
                                            {campus.fields.campusName}
                                        </a>
                                        <button 
                                            class="expand-btn"
                                            data-campus-slug={campusSlug}
                                            type="button"
                                            aria-label="Expand courses"
                                        >
                                           <i class="bi-chevron-down" data-lucide="chevron-down"></i>
                                        </button>
                                    </div>
                                    <div class="course-list" id={`courses-${campusSlug}`}>
                                        {campus.fields.courses.map((course) => (
                                            <a 
                                                href={`/${campusSlug}/${course.fields.courseSlug}`} 
                                                class="course-item"
                                                data-course-link={course.fields.courseSlug}
                                            >
                                                {course.fields.courseName}
                                            </a>
                                        ))}
                                    </div>
                                </>
                            ) : (
                                <a 
                                    href={`/${campusSlug}`} 
                                    class="campus-header campus-header--solo"
                                    data-campus-link={campusSlug}
                                >
                                    {campus.fields.campusName}
                                </a>
                            )}
                        </div>
                    );
                })}

                {/* Other Links Section - Resources only */}
                {menuResources.length > 0 && (
                    <>
                        <div class="section-divider"></div>
                        <h5 class="offcanvas-title" id="offcanvasNavbarLabel">OTHER LINKS</h5>
                        
                        {/* Individual Resource Links */}
                        {menuResources.map((resource) => (
                            <a 
                                href={`/${resource.fields.resourceSlug}`} 
                                class="campus-header campus-header--solo"
                                data-resource-link={resource.fields.resourceSlug}
                            >
                                {resource.fields.resourceName.toUpperCase()}
                            </a>
                        ))}
                    </>
                )}
            </div>
            
            <div class="offcanvas-footer">
                <div class="footer-buttons">
                    <a href="https://m365.cloud.microsoft/apps/" target="_blank" class="btn-footer-half">OFFICE 365</a>
                    <a href="https://login.microsoftonline.com/common/oauth2/v2.0/logout" class="btn-footer-half btn-logout">LOG OUT</a>
                </div>
            </div>
        </div>
    </div>
</header>

<style>
  .lucide.bi-chevron-down  {
    width: 3rem;
    height: 3rem;
    stroke-width: 1.5px;
  }

  header {
    position: relative;
    z-index: 10;
    background-color: var(--header-color);
  }

  header .container {
    padding-right: 15px;
  }

  .location-status {
    color: var(--text-color);
    font-size: 0.9rem;
  }

  .location-status .bi-geo-alt-fill {
    color: var(--accent-yellow);
  }

  .location-status .text-warning {
    color: var(--accent-yellow) !important;
  }

  .course-indicator {
    color: var(--text-color);
    opacity: 0.8;
  }

  .location-hamburger-btn {
    background-color: var(--accent-yellow);
    border: none;
    color: var(--button-text-color);
    padding: 0.5rem 1rem;
    font-size: 0.9rem;
    font-weight: 700;
    transition: all 0.2s ease-in-out;
  }

  .location-hamburger-btn:hover {
    background-color: var(--text-color);
    color: var(--button-text-color);
    transform: scale(1.05);
  }

  .offcanvas {
    background-color: var(--accent-yellow);
    color: var(--button-text-color);
    transition: transform 0.1s ease-in-out !important;
  }

  .offcanvas-header {
    border-bottom: 2px solid var(--button-text-color);
    padding: 1.5rem;
  }

  .offcanvas-title {
    color: var(--button-text-color);
    font-weight: 700;
    font-size: 1.2rem;
    letter-spacing: 1px;
  }

  .offcanvas .btn-close {
    filter: none;
    opacity: 1;
    font-size: 1.2rem;
    transition: transform 0.2s ease-in-out;
  }

  .offcanvas .btn-close:hover {
    transform: scale(1.3);
  }

  .location-list {
    padding: 1.5rem 1.5rem;
    flex-grow: 1;
    overflow-y: auto;
    display: flex;
    flex-direction: column;
    gap: 0.25rem;
  }

  /* Campus group styling */
  .campus-group {
  }

  /* Campus header wrapper for split link/button */
  .campus-header-wrapper {
    display: flex;
    align-items: center;
    justify-content: space-between;
    width: 100%;
    border-bottom: 2px solid transparent;
    transition: border-color 0.2s ease-in-out;
  }

  .campus-header-wrapper:hover {
    border-bottom-color: var(--button-text-color);
  }

  /* Unified campus header styles */
  .campus-header {
    font-family: 'Futura PT';
    display: block;
    padding: 0.25rem 0;
    font-size: clamp(1.3rem, 3.5vw, 1.8rem);
    font-weight: 700;
    color: var(--button-text-color);
    text-decoration: none;
    text-transform: uppercase;
    transition: all 0.2s ease-in-out;
  }

  /* When in wrapper with chevron */
  .campus-header-wrapper .campus-header {
    flex: 1;
    width: auto;
  }

  /* Solo campus (no chevron) */
  .campus-header--solo {
    margin-top: 1rem;
    width: 100%;
    border-bottom: 2px solid transparent;
  }

  /* Static section (not clickable) */
  .campus-header--static {
    cursor: default;
  }

  /* Hover states */
  .campus-header:not(.campus-header--static):hover {
    transform: translateX(10px);
    color: var(--button-text-color);
  }

  .campus-header--solo:hover {
    border-bottom-color: var(--button-text-color);
  }

  .campus-header--static:hover {
    transform: none;
  }

  /* Section divider */
  .section-divider {
    height: 3px;
    margin: 2rem 0 1rem 0;
    border-radius: 2px;
  }

  /* Expand button (chevron only) */
  .expand-btn {
    padding: 1rem;
    background: transparent;
    border: none;
    color: var(--button-text-color);
    cursor: pointer;
    transition: background-color 0.2s ease-in-out, transform 0.2s ease-in-out;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .expand-btn:hover {
    transform: scale(1.4);
  }

  .expand-btn .bi-chevron-down {
    transition: transform 0.2s ease-in-out;
  }

  .expand-btn.expanded .bi-chevron-down {
    transform: rotate(180deg);
  }

  /* Course list styling */
  .course-list {
    max-height: 0;
    overflow: hidden;
    transition: max-height 0.3s ease-out;
    padding-left: 2rem;
  }

  .course-list.expanded {
    max-height: 500px;
  }

  .course-item {
    display: block;
    padding: 0.5rem 1rem;
    font-size: clamp(1.1rem, 2.5vw, 1.2rem);
    font-weight: 600;
    color: var(--button-text-color);
    text-decoration: none;
    border-left: 3px solid transparent;
    transition: all 0.2s ease-in-out;
  }

  .course-item:hover {
    border-left-color: var(--button-text-color);
    padding-left: 1.5rem;
    background-color: rgba(0, 0, 0, 0.03);
  }

  /* Footer section */
  .offcanvas-footer {
    padding: 1.5rem;
    border-top: 2px solid var(--button-text-color);
    background-color: var(--accent-yellow);
  }

  .footer-buttons {
    display: flex;
    gap: 1rem;
  }

  .btn-footer-half {
    flex: 1;
    padding: 1rem;
    background-color: transparent;
    border: 2px solid var(--button-text-color);
    color: var(--button-text-color);
    text-align: center;
    text-decoration: none;
    font-weight: 700;
    font-size: 1rem;
    border-radius: 5px;
    transition: all 0.2s ease-in-out;
  }

  .btn-footer-half:hover {
    background-color: var(--button-text-color);
    color: var(--accent-yellow);
    transform: scale(1.02);
  }

  .btn-footer-half.btn-logout {
    background-color: var(--button-text-color);
    color: var(--accent-yellow);
  }

  .btn-footer-half.btn-logout:hover {
    background-color: var(--accent-red);
    color: var(--text-color);
  }

  @media (max-width: 768px) {
    .location-hamburger-btn {
      font-size: 0.8rem;
      padding: 0.4rem 0.8rem;
    }
    
    header .container {
      gap: 0.5rem;
    }
    
    header img {
      height: 40px !important;
    }

    .course-item {
      font-size: 1rem;
      padding: 0.4rem 0.8rem;
    }
  }
</style>

<script>
  import { navigate } from 'astro:transitions/client';

  function setupOffcanvasNavigation() {
    const offcanvasElement = document.getElementById('offcanvasNavbar');
    if (!offcanvasElement || offcanvasElement.dataset.navListenerAttached) {
      return;
    }
    offcanvasElement.dataset.navListenerAttached = 'true';

    // Manual close function that bypasses Bootstrap
    function closeOffcanvasManually() {
      // Remove show class from offcanvas
      offcanvasElement.classList.remove('show');
      offcanvasElement.removeAttribute('aria-modal');
      offcanvasElement.removeAttribute('role');
      offcanvasElement.setAttribute('aria-hidden', 'true');
      
      // Remove ALL backdrops (in case multiple got created)
      document.querySelectorAll('.offcanvas-backdrop').forEach(backdrop => {
        backdrop.remove();
      });
      
      // Reset body
      document.body.classList.remove('modal-open');
      document.body.style.removeProperty('overflow');
      document.body.style.removeProperty('padding-right');
    }
    
    // Instant hide for navigation - no animation
    function hideOffcanvasForNavigation() {
      const backdrop = document.querySelector('.offcanvas-backdrop');
      
      // Instantly hide both elements
      offcanvasElement.style.display = 'none';
      if (backdrop) {
        backdrop.style.display = 'none';
      }
      
      // Clean up properly after navigation
      setTimeout(() => {
        closeOffcanvasManually();
        offcanvasElement.style.display = '';
      }, 100);
    }

    // Setup expand buttons for all expandable sections
    const expandButtons = offcanvasElement.querySelectorAll('.expand-btn');
    expandButtons.forEach(button => {
      button.addEventListener('click', (event) => {
        event.preventDefault();
        event.stopPropagation();
        
        const campusSlug = button.dataset.campusSlug;
        const courseList = document.getElementById(`courses-${campusSlug}`);
        
        // Toggle expanded state
        button.classList.toggle('expanded');
        courseList.classList.toggle('expanded');
        
        // Optional: Collapse other sections
        expandButtons.forEach(otherButton => {
          if (otherButton !== button) {
            otherButton.classList.remove('expanded');
            const otherSlug = otherButton.dataset.campusSlug;
            const otherList = document.getElementById(`courses-${otherSlug}`);
            if (otherList) {
              otherList.classList.remove('expanded');
            }
          }
        });
      });
    });

    // Setup navigation for all clickable links
    const navigationLinks = offcanvasElement.querySelectorAll('.campus-header:not(.campus-header--static), .course-item');
    navigationLinks.forEach(link => {
      link.addEventListener('click', (event) => {
        event.preventDefault();
        const targetUrl = link.getAttribute('href');
        
        // Instantly hide offcanvas and backdrop
        hideOffcanvasForNavigation();
        
        // Navigate immediately
        navigate(targetUrl);
      });
    });
    
    // Override backdrop clicks to ensure proper cleanup
    document.addEventListener('click', (event) => {
      if (event.target.classList.contains('offcanvas-backdrop')) {
        event.preventDefault();
        event.stopPropagation();
        closeOffcanvasManually();
      }
    });
    
    // Clean up any stray backdrops on page load
    document.querySelectorAll('.offcanvas-backdrop').forEach(backdrop => {
      backdrop.remove();
    });
  }

  document.addEventListener('astro:page-load', setupOffcanvasNavigation);
</script>